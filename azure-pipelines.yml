# Azure DevOps Pipeline for Build + Scan + Push + Deploy to AKS

trigger:
- Backend007

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'container123'
  imageRepository: 'test'
  containerRegistry: 'endregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'test-auth'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: "Build and Push Stage"
  jobs:
  - job: Build
    displayName: "Build"
    pool:
      vmImage: $(vmImageName)
    steps:

    # Maven Build
    - task: Maven@4
      displayName: "Build Maven Project"
      inputs:
        mavenPomFile: 'pom.xml'
        goals: 'clean install -DskipTests=true'

    # Build Docker Image
    - task: Docker@2
      displayName: "Build Docker Image"
      inputs:
        command: build
        repository: $(containerRegistry)/$(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    
    # Push Docker Image to ACR
    - task: Docker@2
      displayName: "Push Docker Image to ACR"
      inputs:
        command: push
        repository: $(containerRegistry)/$(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    # Upload K8S Manifests as Artifact
    - upload: manifests
      artifact: manifests


# DEPLOY STAGE
- stage: Deploy
  displayName: "Deploy to AKS"
  dependsOn: Build
  jobs:
  - deployment: Deploy
    environment: "TestFourids"
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            displayName: "Download Manifests"
            inputs:
              artifact: manifests
              path: $(Pipeline.Workspace)/manifests

          - task: KubernetesManifest@0
            displayName: "Create imagePullSecret"
            inputs:
              kubernetesServiceConnection: 'aks-service-connection'
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: "Deploy to AKS"
            inputs:
              kubernetesServiceConnection: 'aks-service-connection'
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/configmap.yaml
                $(Pipeline.Workspace)/manifests/secret.yaml
                $(Pipeline.Workspace)/manifests/deployment.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)
